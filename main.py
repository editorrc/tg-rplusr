import os
import logging
import random
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
WHITELIST_FILE = "whitelist.json"
ANSWERS_FILE = "answers_data.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_answers = {}
answer_list = []
roll_pool = []

def load_whitelist():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        with open(WHITELIST_FILE, "r") as f:
            return set(json.load(f))
    except FileNotFoundError:
        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {7780504410}

def save_whitelist(whitelist):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    with open(WHITELIST_FILE, "w") as f:
        json.dump(list(whitelist), f)

def save_bot_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    state = {
        "user_answers": user_answers,
        "answer_list": answer_list,
        "roll_pool": roll_pool
    }
    with open(ANSWERS_FILE, "w") as f:
        json.dump(state, f)

def load_bot_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    global user_answers, answer_list, roll_pool
    try:
        with open(ANSWERS_FILE, "r") as f:
            state = json.load(f)
            user_answers = state.get("user_answers", {})
            answer_list = state.get("answer_list", [])
            roll_pool = state.get("roll_pool", [])
    except (FileNotFoundError, json.JSONDecodeError):
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ANSWERS_FILE}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        user_answers, answer_list, roll_pool = {}, [], []

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
whitelist = load_whitelist()
load_bot_state()

async def start(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "++ - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç\n"
        "/rprlb - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n"
        "/rnr - —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
    )

async def _format_leaderboard():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    if not user_answers:
        return "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞."

    leaderboard = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤* üèÜ\n\n"

    # –ü–µ—Ä–µ—á–µ–Ω—å –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    all_answers = []
    for user_id, answers in user_answers.items():
        username = f"ID {user_id}"  # –ò–º–µ–Ω–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
        for answer in answers:
            all_answers.append((answer, username))

    all_answers.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç–≤–µ—Ç–∞
    answer_list_str = "\n".join([f"{num}. {user}" for num, user in all_answers])

    # –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    user_scores = {}
    for user_id, answers in user_answers.items():
        user_scores[user_id] = len(answers)

    sorted_users = sorted(user_scores.items(), key=lambda item: item[1], reverse=True)
    scores_str = "\n".join([f"@{user_id} ‚Äî {score} –±–∞–ª–ª–æ–≤" for user_id, score in sorted_users])

    return f"{leaderboard}{answer_list_str}\n\nüìä *–°–≤–æ–¥–∫–∞ –ø–æ –±–∞–ª–ª–∞–º:*\n{scores_str}"

async def show_leaderboard(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    if update.effective_user.id not in whitelist:
        return

    leaderboard = await _format_leaderboard()
    await update.message.reply_text(leaderboard, parse_mode='Markdown')
    save_bot_state()

async def add_answer(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    if update.effective_user.id not in whitelist:
        return

    if update.message.reply_to_message:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞
        user_id = update.message.reply_to_message.from_user.id
        answer_number = len(answer_list) + 1

        answer_list.append(answer_number)
        roll_pool.append(answer_number)

        if user_id not in user_answers:
            user_answers[user_id] = []
        user_answers[user_id].append(answer_number)

        await update.message.reply_text(f"–ë–∞–ª–ª ‚Ññ{answer_number} –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user_id}")
        save_bot_state()
    else:
        # –ï—Å–ª–∏ `++` –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        await show_leaderboard(update, context)

async def remove_answer(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
    if update.effective_user.id not in whitelist:
        return

    try:
        answer_number = int(context.args[0])
        if answer_number not in answer_list:
            await update.message.reply_text("–û—Ç–≤–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        answer_list.remove(answer_number)
        if answer_number in roll_pool:
            roll_pool.remove(answer_number)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in list(user_answers.keys()):
            if answer_number in user_answers[user_id]:
                user_answers[user_id].remove(answer_number)
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤
                if not user_answers[user_id]:
                    del user_answers[user_id]

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–≤–µ—Ç–æ–≤
        corrected_answer_list = [num if num < answer_number else num - 1 for num in answer_list]
        answer_list.clear()
        answer_list.extend(corrected_answer_list)

        save_bot_state()
        await update.message.reply_text(f"–û—Ç–≤–µ—Ç ‚Ññ{answer_number} —É–¥–∞–ª–µ–Ω.")

    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–º–∏–Ω—É—Å <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>")
    except Exception as e:
        logger.error(f"Error in remove_answer: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def roll_winner(update: Update, context: CallbackContext):
    """–†–æ–∑—ã–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    if update.effective_user.id not in whitelist:
        return

    if not roll_pool:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    winner_number = random.choice(roll_pool)
    winner_user_id = None
    for user_id, answers in user_answers.items():
        if winner_number in answers:
            winner_user_id = user_id
            break

    if winner_user_id:
        try:
            winner = await context.bot.get_chat(winner_user_id)
            winner_username = f"@{winner.username}" if winner.username else winner.full_name
        except Exception:
            winner_username = f"ID {winner_user_id}"

        await update.message.reply_text(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_number} ({winner_username})")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")

async def modify_roll(update: Update, context: CallbackContext):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if update.effective_user.id not in whitelist:
        return

    try:
        target_user_id = int(context.args[0]) if context.args[0].isdigit() else (await context.bot.get_chat_member(update.effective_chat.id, context.args[0][1:])).user.id

        if target_user_id in user_answers:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ roll_pool
            for answer in user_answers[target_user_id]:
                if answer in roll_pool:
                    roll_pool.remove(answer)

            del user_answers[target_user_id]
            save_bot_state()

            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !–º—Ä—Ä @<tglink> –∏–ª–∏ !–º—Ä—Ä <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def add_to_whitelist(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
    if update.effective_user.id not in whitelist:
        return

    try:
        user_id = int(context.args[0])
        whitelist.add(user_id)
        save_whitelist(whitelist)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.")
    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rpr_wladd <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def remove_from_whitelist(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    if update.effective_user.id not in whitelist:
        return

    try:
        user_id = int(context.args[0])
        whitelist.discard(user_id)
        save_whitelist(whitelist)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rpr_wldel <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def clear_ratio(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if update.effective_user.id not in whitelist:
        return

    global user_answers, answer_list, roll_pool
    user_answers.clear()
    answer_list.clear()
    roll_pool.clear()
    save_bot_state()

    await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = (
        Application.builder()
        .token(TOKEN)
        .connect_timeout(20)
        .read_timeout(20)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("rprun", start))
    application.add_handler(CommandHandler("rprlb", show_leaderboard))
    application.add_handler(CommandHandler("rpr_table", show_leaderboard))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^\+\+$|^–ø–ª—é—Å$"), add_answer))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^–º–∏–Ω—É—Å$"), remove_answer))

    # –†–æ–∑—ã–≥—Ä—ã—à –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    application.add_handler(CommandHandler("rpr", roll_winner))
    application.add_handler(CommandHandler("rpr_modify", modify_roll))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^–º—Ä—Ä$"), modify_roll))

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
    application.add_handler(CommandHandler("rpr_wladd", add_to_whitelist))
    application.add_handler(CommandHandler("rpr_wldel", remove_from_whitelist))
    application.add_handler(CommandHandler("rpr_clearratio", clear_ratio))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()


import os
import logging
import random
import json
import io
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaIoBaseUpload

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
WHITELIST_FILE = "whitelist.json"
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
BASE_FOLDER_ID = os.getenv("GOOGLE_DRIVE_FOLDER_ID") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: ID –ø–∞–ø–∫–∏ –Ω–∞ Google –î–∏—Å–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ Google –î–∏—Å–∫–∞)
user_answers = {}
answer_list = []
roll_pool = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Drive
def get_gdrive_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Google Drive API."""
    try:
        creds_json = json.loads(GOOGLE_CREDENTIALS)
        creds = service_account.Credentials.from_service_account_info(creds_json)
        service = build('drive', 'v3', credentials=creds)
        return service
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Drive API: {e}")
        return None

def get_filename(chat_id, game_number="default"):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ."""
    return f"answers_chat_{chat_id}_game_{game_number}.json"

def find_file_id(service, filename, parent_folder_id=None):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ."""
    query = f"name='{filename}' and trashed=false"
    if parent_folder_id:
        query += f" and '{parent_folder_id}' in parents"
    try:
        results = service.files().list(q=query, fields="files(id)").execute()
        items = results.get('files', [])
        return items[0]['id'] if items else None
    except HttpError as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞: {error}")
        return None

def create_empty_json_on_drive(service, filename, parent_folder_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π JSON-—Ñ–∞–π–ª –Ω–∞ Google –î–∏—Å–∫–µ."""
    file_metadata = {'name': filename, 'mimeType': 'application/json'}
    if parent_folder_id:
        file_metadata['parents'] = [parent_folder_id]

    empty_json = io.BytesIO(json.dumps({}).encode('utf-8'))
    media = MediaIoBaseUpload(empty_json, mimetype="application/json")

    try:
        file = service.files().create(body=file_metadata, media_body=media).execute()
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π JSON-—Ñ–∞–π–ª: {filename}, ID: {file['id']}")
        return file['id']
    except HttpError as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {error}")
        return None

def load_bot_state(chat_id, game_number="default"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ Google –î–∏—Å–∫–∞."""
    global user_answers, answer_list, roll_pool
    service = get_gdrive_service()
    if not service:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Drive.")
        return

    filename = get_filename(chat_id, game_number)
    file_id = find_file_id(service, filename, BASE_FOLDER_ID)

    if not file_id:
        logger.info(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON...")
        file_id = create_empty_json_on_drive(service, filename, BASE_FOLDER_ID)

    if file_id:
        try:
            request = service.files().get_media(fileId=file_id)
            file_content = request.execute()
            state = json.loads(file_content.decode('utf-8'))
            user_answers = state.get("user_answers", {})
            answer_list = state.get("answer_list", [])
            roll_pool = state.get("roll_pool", [])
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Google –î–∏—Å–∫–∞ (ID: {file_id}).")
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ answer_list –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {answer_list}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ roll_pool –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {roll_pool}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        except HttpError as error:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å Google –î–∏—Å–∫–∞: {error}")
            user_answers, answer_list, roll_pool = {}, [], []
        except json.JSONDecodeError:
            logger.error(f"–§–∞–π–ª {filename} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
            user_answers, answer_list, roll_pool = {}, [], []
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {filename} –Ω–∞ Google –î–∏—Å–∫–µ.")
        user_answers, answer_list, roll_pool = {}, [], []

def save_bot_state(chat_id, game_number="default"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ Google –î–∏—Å–∫."""
    service = get_gdrive_service()
    if not service:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Drive.")
        return

    filename = get_filename(chat_id, game_number)
    file_id = find_file_id(service, filename, BASE_FOLDER_ID)

    state = {
        "user_answers": user_answers,
        "answer_list": answer_list,
        "roll_pool": roll_pool
    }
    json_data = io.BytesIO(json.dumps(state, ensure_ascii=False, indent=4).encode('utf-8'))
    media = MediaIoBaseUpload(json_data, mimetype="application/json")

    try:
        if file_id:
            request = service.files().update(fileId=file_id, media_body=media)
            updated_file = request.execute()
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ Google –î–∏—Å–∫–µ (ID: {updated_file.get('id')}).")
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ answer_list –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {answer_list}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ roll_pool –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {roll_pool}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        else:
            file_metadata = {'name': filename, 'mimeType': 'application/json'}
            if BASE_FOLDER_ID:
                file_metadata['parents'] = [BASE_FOLDER_ID]
            request = service.files().create(body=file_metadata, media_body=media)
            created_file = request.execute()
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ Google –î–∏—Å–∫–µ (ID: {created_file.get('id')}).")
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ answer_list –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {answer_list}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ roll_pool –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {roll_pool}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    except HttpError as error:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ: {error}")

def load_whitelist():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)"""
    try:
        with open(WHITELIST_FILE, "r") as f:
            return set(json.load(f))
    except FileNotFoundError:
        return {7780504410}

def save_whitelist(whitelist):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)"""
    with open(WHITELIST_FILE, "w") as f:
        json.dump(list(whitelist), f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
whitelist = load_whitelist()

async def start(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. "
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ++ - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç /rprlb - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ /rpr - —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
    )

async def _format_leaderboard(user_answers, context):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –≤ _format_leaderboard: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not user_answers:
        return "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞."

    leaderboard = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤* üèÜ\n\n"

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    all_answers_with_text = []
    for user_id, answers in user_answers.items():
        try:
            user = await context.bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else user.full_name
        except Exception:
            username = f"ID {user_id}"
        for answer in answers:
            all_answers_with_text.append((answer["number"], username, answer["text"]))

    all_answers_with_text.sort(key=lambda item: item[0])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É

    for number, username, text in all_answers_with_text:
        leaderboard += f"{number}. {username} - {text}\n"

    leaderboard += "\nüìä *–°–≤–æ–¥–∫–∞ –ø–æ –±–∞–ª–ª–∞–º:*\n"
    user_scores = {}
    for user_id, answers in user_answers.items():
        try:
            user = await context.bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else user.full_name
        except Exception:
            username = f"ID {user_id}"
        user_scores[username] = len(answers)

    sorted_scores = sorted(user_scores.items(), key=lambda item: item[1], reverse=True)
    for username, score in sorted_scores:
        leaderboard += f"{username} ‚Äî {score} –±–∞–ª–ª{'–∞' if 2 <= score <= 4 else '–æ–≤' if score >= 5 or score == 0 else ''}\n"

    return leaderboard

async def show_leaderboard(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –≤ show_leaderboard –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    leaderboard = await _format_leaderboard(user_answers, context)
    await update.message.reply_text(leaderboard, parse_mode='Markdown')
    save_bot_state(chat_id)

async def add_answer(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)

    try:
        command = update.message.text.strip().lower()

        if command in ["++", "–ø–ª—é—Å", "/add", "/plus"]:
            if update.message.reply_to_message:
                if len(answer_list) >= 100:
                    await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 100 –æ—Ç–≤–µ—Ç–æ–≤.")
                    return

                user_id = update.message.reply_to_message.from_user.id
                answer_number = len(answer_list) + 1
                message_text = update.message.reply_to_message.text
                answer_data = {"number": answer_number, "text": message_text}
                answer_list.append(answer_data)
                roll_pool.append(answer_number)

                if user_id not in user_answers:
                    user_answers[user_id] = []
                user_answers[user_id].append(answer_data)

                try:
                    user = await context.bot.get_chat(user_id)
                    username = f"@{user.username}" if user.username else user.full_name
                except Exception:
                    username = f"ID {user_id}"

                total_answers = len(user_answers[user_id])
                await update.message.reply_text(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_answers} –±–∞–ª–ª{'–∞' if total_answers == 1 else '–∞' if 2 <= total_answers <= 4 else '–æ–≤'}.")
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                await show_leaderboard(update, context)
                save_bot_state(chat_id)
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_answers –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {user_answers}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            else:
                await show_leaderboard(update, context)

        elif command in ["/rprlb", "/rpr_table"]:
            await show_leaderboard(update, context)

        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–ø–ª—é—Å –∏–ª–∏ ++.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_answer: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def remove_answer(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)

    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–º–∏–Ω—É—Å <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>")
            return

        answer_number_to_remove = int(context.args[0])

        # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–∑ answer_list
        answer_list[:] = [item for item in answer_list if item["number"] != answer_number_to_remove]

        # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–∑ roll_pool
        if answer_number_to_remove in roll_pool:
            roll_pool.remove(answer_number_to_remove)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in list(user_answers.keys()):
            user_answers[user_id] = [item for item in user_answers[user_id] if item["number"] != answer_number_to_remove]
            if not user_answers[user_id]:
                del user_answers[user_id]

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)

        save_bot_state(chat_id)
        await update.message.reply_text(f"–û—Ç–≤–µ—Ç ‚Ññ{answer_number_to_remove} —É–¥–∞–ª–µ–Ω.")

    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–º–∏–Ω—É—Å <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>")
    except Exception as e:
        logger.error(f"Error in remove_answer: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def roll_winner(update: Update, context: CallbackContext):
    """–†–æ–∑—ã–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)

    if not roll_pool:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    winner_number = random.choice(roll_pool)
    winner_user_id = None
    for user_id, answers in user_answers.items():
        for answer in answers:
            if answer["number"] == winner_number:
                winner_user_id = user_id
                break
        if winner_user_id:
            break

    if winner_user_id:
        try:
            winner = await context.bot.get_chat(winner_user_id)
            winner_username = f"@{winner.username}" if winner.username else winner.full_name
        except Exception:
            winner_username = f"ID {winner_user_id}"

        await update.message.reply_text(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_number} ({winner_username})")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")

async def modify_roll(update: Update, context: CallbackContext):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)

    try:
        target_user_id = int(context.args[0]) if context.args[0].isdigit() else (await context.bot.get_chat_member(update.effective_chat.id, context.args[0][1:])).user.id

        if target_user_id in user_answers:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ roll_pool
            for answer in user_answers[target_user_id]:
                if answer["number"] in roll_pool:
                    roll_pool.remove(answer["number"])

            del user_answers[target_user_id]
            save_bot_state(chat_id)

            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !–º—Ä—Ä @<tglink> –∏–ª–∏ !–º—Ä—Ä <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def add_to_whitelist(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)
    try:
        user_id = int(context.args[0])
        whitelist.add(user_id)
        save_whitelist(whitelist)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.")
        save_bot_state(chat_id)
    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rpr_wladd <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def remove_from_whitelist(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)
    try:
        user_id = int(context.args[0])
        whitelist.discard(user_id)
        save_whitelist(whitelist)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
        save_bot_state(chat_id)
    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rpr_wldel <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def clear_ratio(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if update.effective_user.id not in whitelist:
        return

    chat_id = update.effective_chat.id
    load_bot_state(chat_id)
    global user_answers, answer_list, roll_pool
    user_answers.clear()
    answer_list.clear()
    roll_pool.clear()
    save_bot_state(chat_id)

    await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = (
        Application.builder()
        .token(TOKEN)
        .connect_timeout(20)
        .read_timeout(20)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("rprun", start))
    application.add_handler(CommandHandler("rprlb", show_leaderboard))
    application.add_handler(CommandHandler("rpr_table", show_leaderboard))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^\+\+$|^–ø–ª—é—Å$|^/add$|^/plus$"), add_answer))
    application.add_handler(CommandHandler("minus", remove_answer))
    application.add_handler(CommandHandler("remove", remove_answer))
    application.add_handler(CommandHandler("del", remove_answer))

    # –†–æ–∑—ã–≥—Ä—ã—à –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    application.add_handler(CommandHandler("rpr", roll_winner))
    application.add_handler(CommandHandler("rpr_modify", modify_roll))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^–º—Ä—Ä$"), modify_roll))

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
    application.add_handler(CommandHandler("rpr_wladd", add_to_whitelist))
    application.add_handler(CommandHandler("rpr_wldel", remove_from_whitelist))
    application.add_handler(CommandHandler("rpr_clearratio", clear_ratio))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

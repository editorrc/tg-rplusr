import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import random
import json

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–∞
WHITELIST_FILE = "whitelist.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–π—Ç–ª–∏—Å—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
def load_whitelist():
    try:
        with open(WHITELIST_FILE, "r") as f:
            return set(json.load(f))
    except FileNotFoundError:
        # –ó–∞–º–µ–Ω–∏—Ç–µ 123456789 –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return {7780504410}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–π—Ç–ª–∏—Å—Ç
def save_whitelist(whitelist):
    with open(WHITELIST_FILE, "w") as f:
        json.dump(list(whitelist), f)

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É
whitelist = load_whitelist()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

user_answers = {}
answer_list = []
roll_pool = []

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã ++, --, —Ä—Ä, –º—Ä—Ä, /rpr_wladd, /rpr_wldel –∏ /rpr_clearratio.")

async def add_answer(update: Update, context: CallbackContext):
    try:
        if update.effective_user.id not in whitelist:
            return

        command = update.message.text.strip().lower()

        if command in ["++", "–ø–ª—é—Å"]:
            if update.message.reply_to_message:
                user_id = update.message.reply_to_message.from_user.id
                answer_number = len(answer_list) + 1
                answer_list.append(answer_number)
                roll_pool.append(answer_number)

                if user_id not in user_answers:
                    user_answers[user_id] = []
                user_answers[user_id].append(answer_number)

                leaderboard = await format_leaderboard(update, context)
                user = await context.bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else user.full_name
                await update.message.reply_text(f"–ë–∞–ª–ª ‚Ññ{answer_number} –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}\n\n{leaderboard}")
                logger.info(f"User {user_id} added answer {answer_number}")
            else:
                leaderboard = await format_leaderboard(update, context)
                await update.message.reply_text(leaderboard)

        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–ø–ª—é—Å –∏–ª–∏ ++.")

    except Exception as e:
        logger.error(f"Error in add_answer: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        
async def remove_answer(update: Update, context: CallbackContext):
    try:
        if update.effective_user.id not in whitelist:
            return

        command = update.message.text.strip().lower()
        if command.startswith("--") or command.startswith("–º–∏–Ω—É—Å") or command.startswith("—É–¥"):
            if not context.args:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–º–∏–Ω—É—Å <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>")
                return

            try:
                answer_number = int(context.args[0])
                if answer_number not in answer_list:
                    await update.message.reply_text("–û—Ç–≤–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                answer_list.remove(answer_number)
                # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user_id, answers in user_answers.items():
                    if answer_number in answers:
                        answers.remove(answer_number)

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–≤–µ—Ç–æ–≤
                for i in range(len(answer_list)):
                    if answer_list[i] > answer_number:
                        answer_list[i] -= 1

                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≤ user_answers
                for user_id, answers in user_answers.items():
                    for j in range(len(answers)):
                        if answers[j] > answer_number:
                            answers[j] -= 1

                await update.message.reply_text(await format_leaderboard(update, context))
                logger.info(f"User {update.effective_user.id} removed answer {answer_number}")

            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–º–∏–Ω—É—Å <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>")
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–º–∏–Ω—É—Å, /—É–¥ –∏–ª–∏ -- <–Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞>.")
    except Exception as e:
        logger.error(f"Error in remove_answer: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def roll_winner(update: Update, context: CallbackContext):
    try:
        if update.effective_user.id not in whitelist:
            return

        if not roll_pool:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        winner_number = random.choice(roll_pool)
        winner_user_id = None
        for user_id, answers in user_answers.items():
            if winner_number in answers:
                winner_user_id = user_id
                break

        if winner_user_id:
            winner_username = (await context.bot.get_chat_member(update.effective_chat.id, winner_user_id)).user.username
            await update.message.reply_text(await format_winner(winner_number, winner_username))
            logger.info(f"User {update.effective_user.id} rolled winner {winner_number}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"Error in roll_winner: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")

async def modify_roll(update: Update, context: CallbackContext):
    try:
        if update.effective_user.id not in whitelist:
            return

        try:
            target_user_id = int(context.args[0]) if context.args[0].isdigit() else (await context.bot.get_chat_member(update.effective_chat.id, context.args[0][1:])).user.id
            if target_user_id in user_answers:
                for answer in user_answers[target_user_id]:
                    if answer in roll_pool:
                        roll_pool.remove(answer)
                del user_answers[target_user_id]
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
                logger.info(f"User {update.effective_user.id} modified roll for user {context.args[0]}")
            else:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except (ValueError, IndexError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !–º—Ä—Ä @<tglink> –∏–ª–∏ !–º—Ä—Ä <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
    except Exception as e:
        logger.error(f"Error in modify_roll: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")

async def format_leaderboard(update: Update, context: CallbackContext):
    if not user_answers:
        return "üèÜ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—É—Å—Ç–∞."

    leaderboard = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤* üèÜ\n\n"
    leaderboard += "‚Ññ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | –ë–∞–ª–ª—ã\n"
    leaderboard += "---|--------------|------\n"

    sorted_users = sorted(user_answers.items(), key=lambda item: len(item[1]), reverse=True)

    for i, (user_id, answers) in enumerate(sorted_users, start=1):
        try:
            user = await context.bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else user.full_name
        except Exception:
            username = f"ID {user_id}"

        leaderboard += f"{i}. {username} - {len(answers)} –±–∞–ª–ª–æ–≤\n"

    return leaderboard

async def format_winner(winner_number, winner_username):
    return f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_number} (@{winner_username})"

async def add_to_whitelist(update: Update, context: CallbackContext):
    if update.effective_user.id not in whitelist:
        return

    try:
        user_id = int(context.args[0])
        whitelist.add(user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.")
        logger.info(f"User {update.effective_user.id} added {user_id} to whitelist")
        save_whitelist(whitelist)
    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rpr_wladd <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def remove_from_whitelist(update: Update, context: CallbackContext):
    if update.effective_user.id not in whitelist:
        return

    try:
        user_id = int(context.args[0])
        whitelist.discard(user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
        logger.info(f"User {update.effective_user.id} removed {user_id} from whitelist")
        save_whitelist(whitelist)
    except (ValueError, IndexError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rpr_wldel <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

async def clear_ratio(update: Update, context: CallbackContext):
    if update.effective_user.id not in whitelist:
        return

    user_answers.clear()
    answer_list.clear()
    roll_pool.clear()

    await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã.")
    logger.info(f"User {update.effective_user.id} cleared ratio")

def main():
    application = (
        Application.builder()
        .token(TOKEN)
        .connect_timeout(20)
        .read_timeout(20)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞!)
    application.add_handler(CommandHandler("rnr_toggle", start))
    application.add_handler(CommandHandler("rnr_plus", add_answer))  # ‚úÖ –£–±—Ä–∞–ª–∏ "–ø–ª—é—Å"
    application.add_handler(CommandHandler("rnr_minus", remove_answer))
    application.add_handler(CommandHandler("rnr", roll_winner))
    application.add_handler(CommandHandler("rnr_del", modify_roll))
    application.add_handler(CommandHandler("rpr_wladd", add_to_whitelist))
    application.add_handler(CommandHandler("rpr_wldel", remove_from_whitelist))
    application.add_handler(CommandHandler("rpr_clearratio", clear_ratio))

    # –õ–æ–≤–∏–º "++" –∏ "–ø–ª—é—Å" –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^\+\+$"), add_answer))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(?i)^–ø–ª—é—Å$"), add_answer))

    application.run_polling()

if __name__ == "__main__":
    main()
